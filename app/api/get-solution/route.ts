import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { google } from "@ai-sdk/google"

export async function POST(request: NextRequest) {
  try {
    const { questionName, questionLink, platform } = await request.json()

    if (!process.env.GOOGLE_GENERATIVE_AI_API_KEY) {
      return NextResponse.json(
        {
          error:
            "Gemini API key not configured. Please add GOOGLE_GENERATIVE_AI_API_KEY to your environment variables.",
        },
        { status: 500 },
      )
    }

    const prompt = `
    You are an expert competitive programmer. For the following DSA problem, provide a structured solution:

    Problem: ${questionName}
    Platform: ${platform}
    Link: ${questionLink}

    Please provide the response in the following JSON format:
    {
      "questionLink": "${questionLink}",
      "description": "Brief description of the problem in 2-3 sentences",
      "inputOutput": "Clear input-output example with explanation",
      "approach": "Detailed approach and algorithm explanation with time/space complexity",
      "cppSolution": "Complete C++ solution with comments"
    }

    Make sure the C++ solution is complete, well-commented, and follows best practices. Include time and space complexity analysis in the approach section.
    `

    const { text } = await generateText({
      model: google("gemini-1.5-flash"),
      prompt: prompt,
      temperature: 0.3,
    })

    // Try to parse the JSON response
    let solution
    try {
      // Extract JSON from the response if it's wrapped in markdown
      const jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || text.match(/\{[\s\S]*\}/)
      const jsonString = jsonMatch ? jsonMatch[1] || jsonMatch[0] : text
      solution = JSON.parse(jsonString)
    } catch (parseError) {
      // If JSON parsing fails, create a structured response from the text
      solution = {
        questionLink: questionLink,
        description: "Generated solution from Gemini AI",
        inputOutput: "Please refer to the problem link for examples",
        approach: text.substring(0, 500) + "...",
        cppSolution: "// Solution generated by Gemini AI\n" + text.substring(500),
      }
    }

    return NextResponse.json(solution)
  } catch (error) {
    console.error("Error generating solution:", error)
    return NextResponse.json({ error: "Failed to generate solution" }, { status: 500 })
  }
}
